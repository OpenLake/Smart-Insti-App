#!/usr/bin/env node

import app from "../app.js";
import debug from "debug";
import http from "http";

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  return isNaN(port) ? val : port >= 0 ? port : false;
}

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server and listen on provided port.
 */
const server = http.createServer(app);

server.listen(port, "0.0.0.0");
server.on("error", onError);
server.on("listening", onListening);

/**
 * Handle server errors gracefully.
 */
function onError(error) {
  if (error.syscall !== "listen") throw error;
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exitCode = 1;
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exitCode = 1;
      break;
    default:
      throw error;
  }
}

/**
 * Log server listening status.
 */
function onListening() {
  const addr = server.address();
  let address = addr.address;
  if (["::", "127.0.0.1", "::1", "0.0.0.0"].includes(address))
    address = "localhost";
  console.log(`Listening on http://${address}:${addr.port}/`);
  debug(`Listening on port ${addr.port}`);
}

/**
 * Graceful shutdown on process termination.
 */
process.on("SIGINT", () => {
  console.log("Shutting down server...");
  server.close(() => {
    console.log("Server closed.");
    process.exit(0);
  });
});

process.on("SIGTERM", () => {
  console.log("Received termination signal, closing server...");
  server.close(() => {
    console.log("Server gracefully terminated.");
    process.exit(0);
  });
});
